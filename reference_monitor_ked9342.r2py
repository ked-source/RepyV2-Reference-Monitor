"""
This security layer inadequately handles A/B storage for files in RepyV2.

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # case 1: if create is passed as 'True', check if files exist or not
    # If the files don't exist, openfile() creates a new file if the file doesn't exist with create = true
    # If the files don't exist create them and fill the 'A' file with SE
    if create:
        if self.Afn in listfiles():
            self.Afile = openfile(self.Afn,create)
            self.Bfile = openfile(self.Bfn,create)
            self.Afile.writeat(self.Afile.readat(None, 0),0)
        else:
            self.Afile = openfile(self.Afn,create)
            self.Bfile = openfile(self.Bfn,create)
            self.Afile.writeat("SE", 0) 
    # case 2: if create is passed as false
    else:
        if self.Afn in listfiles():
            self.Afile = openfile(self.Afn, True)
            self.Bfile = openfile(self.Bfn, True)
            self.Bfile.writeat(self.Afile.readat(None, 0), 0)
      

  def writeat(self,data,offset):
  #The 'try' block is used to catch any exceptions that might occur during the file write operation. If an exception is caught, the method simply returns without doing anything else.
    try:
        #using lock object to prevent other threads or processes from accessing the file while the current thread is writing to it.
        self.lock = createlock()
        self.lock.acquire(True)
        self.Bfile.writeat(data, offset)
        self.lock.release()
    except:
        return
    
    
  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat and return the data read
    readData = self.Afile.readat(bytes, offset)
    return readData


  def close(self):
    writeData = self.Bfile.readat(None, 0)
    # If the first and last letters of the data in the 'B' file are 'S' and 'E', remove the old 'A' file and write valid 'B' data to new 'A' file
    if(writeData.startswith('S') and writeData.endswith('E')):
        self.Afile.close()
        removefile(self.Afn)
        self.Afile = openfile(self.Afn, True)
        self.Afile.writeat(writeData, 0)
    # Close both 'A" and 'B' files and remove write file
    self.Afile.close()
    self.Bfile.close()
    removefile(self.Bfn)


def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,int),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,type(None)),(int)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()

